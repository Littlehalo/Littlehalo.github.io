<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LiuHuang&#39;s Blog</title>
    <link>https://Littlehalo.github.io/</link>
    <description>Recent content on LiuHuang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 09 Apr 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://Littlehalo.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>console控制台</title>
      <link>https://Littlehalo.github.io/ali/console-%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%8E%A7%E5%88%B6%E5%8F%B0/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Littlehalo.github.io/ali/console-%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%8E%A7%E5%88%B6%E5%8F%B0/</guid>
      <description>打开开发者工具以后，顶端有多个面板。
 Elements：查看网页的 HTML 源码和 CSS 代码。 Resources：查看网页加载的各种资源文件（比如代码文件、字体文件 CSS 文件等），以及在硬盘上创建的各种内容（比如本地缓存、Cookie、Local Storage等）。 Network：查看网页的 HTTP 通信情况。 Sources：查看网页加载的脚本源码。 Timeline：查看各种网页行为随时间变化的情况。 Performance：查看网页的性能情况，比如 CPU 和内存消耗。 Console：用来运行 JavaScript 命令。  console.log() console.log方法用于在控制台输出信息。它可以接受一个或多个参数，将它们连接起来输出。
console.log(&#39;Hello World&#39;)// Hello Worldconsole.log(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)// a b cconsole.table() 对于某些复合类型的数据，console.table方法可以将其转为表格显示。
console.dir() dir方法用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。
console.time()，console.timeEnd() 这两个方法用于计时，可以算出一个操作所花费的准确时间。
console.time(&#39;Array initialize&#39;);var array= new Array(1000000);for (var i = array.length - 1; i &amp;gt;= 0; i--) {array[i] = new Object();};console.timeEnd(&#39;Array initialize&#39;);// Array initialize: 1914.</description>
    </item>
    
    <item>
      <title>jsonp跨域问题</title>
      <link>https://Littlehalo.github.io/ali/jsonp%E8%B7%A8%E5%9F%9F/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Littlehalo.github.io/ali/jsonp%E8%B7%A8%E5%9F%9F/</guid>
      <description>有关前端jsonp跨域问题（请求本地文件产生的跨域问题）
jsonp原理  var script = document.createElement(&amp;quot;script&amp;quot;);script.src=&amp;quot;./jsonp.txt?callback=demo&amp;quot;document.body.appendChild(script)function demo(res){console.log(res)}.html&amp;lt;script&amp;gt;function demo(res){console.log(res)}&amp;lt;/script&amp;gt;&amp;lt;script src=&amp;quot;./jsonp.txt?callback=demo&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;.txt本地文件demo({&amp;quot;pro&amp;quot;:[{&amp;quot;name&amp;quot;:&amp;quot;tom&amp;quot;},{&amp;quot;sex&amp;quot;:&amp;quot;111&amp;quot;},{&amp;quot;job&amp;quot;:&amp;quot;w123b&amp;quot;}]})ajax解决 &amp;lt;script src=&amp;quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;// 谷歌浏览器在访问本地文件时 存在跨域问题$.ajax({url: &#39;jsonp.txt&#39;,type: &#39;get&#39;,dataType:&#39;jsonp&#39;,jsonp:&#39;callback&#39;,jsonpCallback:&#39;demo&#39;,success: function (demo) {console.log(demo)}})&amp;lt;/script&amp;gt;</description>
    </item>
    
    <item>
      <title>js对象</title>
      <link>https://Littlehalo.github.io/ali/js%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Littlehalo.github.io/ali/js%E5%AF%B9%E8%B1%A1/</guid>
      <description>Array 对象 Array.isArray() Array.isArray方法返回一个布尔值，表示参数是否为数组。它可以弥补typeof运算符的不足。
push()，pop()   push方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。
  pop方法用于删除数组的最后一个元素，并返回该元素。注意，该方法会改变原数组。对空数组使用pop方法，不会报错，而是返回undefined
  shift()，unshift()   shift()方法用于删除数组的第一个元素，并返回该元素。注意，该方法会改变原数组。
  unshift()方法用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。注意，该方法会改变原数组。
  var a = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];a.unshift(&#39;x&#39;); // 4a // [&#39;x&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;]join()  join()方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔。  var a = [1, 2, 3, 4];a.join(&#39; &#39;) // &#39;1 2 3 4&#39;a.join(&#39; | &#39;) // &amp;quot;1 | 2 | 3 | 4&amp;quot;a.join() // &amp;quot;1,2,3,4&amp;quot;通过call方法，这个方法也可以用于字符串或类似数组的对象。</description>
    </item>
    
    <item>
      <title>js的一些坑坑洼洼</title>
      <link>https://Littlehalo.github.io/ali/js%E4%B8%80%E4%BA%9B%E5%9D%91%E5%9D%91%E6%B4%BC%E6%B4%BC/</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Littlehalo.github.io/ali/js%E4%B8%80%E4%BA%9B%E5%9D%91%E5%9D%91%E6%B4%BC%E6%B4%BC/</guid>
      <description>对象是最复杂的数据类型，又可以分成三个子类型。  狭义的对象（object） 数组（array） 函数（function）  javaScript 有三种方法，可以确定一个值到底是什么类型。  typeof运算符 instanceof运算符 Object.prototype.toString方法  underfine和null的区别 区别是这样的：null是一个表示“空”的对象，转为数值时为0；undefined是一个表示&amp;quot;此处无定义&amp;quot;的原始值，转为数值时为NaN。
布尔值 如果 JavaScript 预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了下面六个值被转为false，其他值都视为true。
 undefined null false 0 NaN &amp;quot;&amp;quot;或&#39;&#39;（空字符串）  注意，空数组（[]）和空对象（{}）对应的布尔值，都是true。
parseInt()  parseInt方法用于将字符串转为整数 如果字符串头部有空格，空格会被自动去除  行首{foo：123} JavaScript 引擎读到上面这行代码，会发现可能有两种含义。第一种可能是，这是一个表达式，表示一个包含foo属性的对象；第二种可能是，这是一个语句，表示一个代码区块，里面有一个标签foo，指向表达式123。为了避免这种歧义，JavaScript 引擎的做法是，如果遇到这种情况，无法确定是对象还是代码块，一律解释为代码块。
如果要解释为对象，最好在大括号前加上圆括号。因为圆括号的里面，只能是表达式，所以确保大括号只能解释为对象。
var foo = &#39;bar&#39;;var obj = {foo: 1,bar: 2};obj.foo // 1obj[foo]上面代码中，引用对象obj的foo属性时，如果使用点运算符，foo就是字符串；如果使用方括号运算符，但是不使用引号，那么foo就是一个变量，指向字符串bar。
arguments 由于 JavaScript 允许函数有不定数目的参数，所以需要一种机制，可以在函数体内部读取所有参数。这就是arguments对象的由来。
闭包 function f1() {var n = 999;function f2() {console.</description>
    </item>
    
    <item>
      <title>vue的双向绑定原理</title>
      <link>https://Littlehalo.github.io/ali/vue%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Littlehalo.github.io/ali/vue%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/</guid>
      <description>Object,defineproperty &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;inputOne&amp;quot;&amp;gt;&amp;lt;h1 id=&amp;quot;h1One&amp;quot;&amp;gt;&amp;lt;/h1&amp;gt;//获取input，h1节点inputOne，h1One//声明对象objvar obj = {value:&#39;&#39;}Object.defineProperty(obj,&#39;value&#39;,{set(val){h1One.innerText = val}})inputOne.onkeyup = function(e){obj.value = e.target.value4 }发布订阅模式 发布&amp;mdash;订阅模式它定义了对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。
发布订阅模式的优点：
 支持简单的广播通信，当对象状态发生改变时，会自动通知已经订阅过的对象。 发布者与订阅者耦合性降低，发布者只管发布一条消息出去，它不关心这条消息如何被订阅者使用，同时，订阅者只监听发布者的事件名，只要发布者的事件名不变，它不管发布者如何改变；  对于第一点，我们日常工作中也经常使用到，比如我们的ajax请求，请求有成功(success)和失败(error)的回调函数，我们可以订阅ajax的success和error事件。我们并不关心对象在异步运行的状态，我们只关心success的时候或者error的时候我们要做点我们自己的事情就可以了~
发布订阅模式的缺点：
 创建订阅者需要消耗一定的时间和内存。 虽然可以弱化对象之间的联系，如果过度使用的话，反而使代码不好理解及代码不好维护等等。  </description>
    </item>
    
    <item>
      <title>constructor</title>
      <link>https://Littlehalo.github.io/ali/js%E4%B8%AD%E7%9A%84constructor/</link>
      <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Littlehalo.github.io/ali/js%E4%B8%AD%E7%9A%84constructor/</guid>
      <description> __proto__和constructor属性是对象所独有的； prototype属性是函数所独有的，因为函数也是一种对象，所以函数也拥有__proto__和constructor属性。 __proto__属性的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的__proto__属性所指向的那个对象（父对象）里找，一直找，直到__proto__属性的终点null，然后返回undefined，再往上找就相当于在null上取值，会报错。通过__proto__属性将对象连接起来的这条链路即我们所谓的原型链。 prototype属性的作用就是让该函数所实例化的对象们都可以找到公用的属性和方法，即f1.proto === Foo.prototype。 constructor属性的含义就是指向该对象的构造函数，所有函数（此时看成对象了）最终的构造函数都指向Function。 另外 proto 属性是浏览器对es5的实现，而不是es标准。  </description>
    </item>
    
    <item>
      <title>Object.prototype.toString.call()</title>
      <link>https://Littlehalo.github.io/ali/object.prototype.tostring.call/</link>
      <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Littlehalo.github.io/ali/object.prototype.tostring.call/</guid>
      <description>使用Object.prototype上的原生toString()方法判断数据类型，使用方法如下： Object.prototype.toString.call(value)
//1.判断基本类型：Object.prototype.toString.call(null);//”[object Null]”Object.prototype.toString.call(undefined);//”[object Undefined]”Object.prototype.toString.call(“abc”);//”[object String]”Object.prototype.toString.call(123);//”[object Number]”Object.prototype.toString.call(true);//”[object Boolean]”//2.判断原生引用类型：//函数类型Function fn(){console.log(“test”);}Object.prototype.toString.call(fn);//”[object Function]”//日期类型var date = new Date();Object.prototype.toString.call(date);//”[object Date]”// 数组类型var arr = [1,2,3];Object.prototype.toString.call(arr);//”[object Array]”//正则表达式var reg = /[hbc]at/gi;Object.prototype.toString.call(arr);//”[object Array]”//自定义类型function Person(name, age) {this.name = name;this.age = age;}var person = new Person(&amp;quot;Rose&amp;quot;, 18);Object.prototype.toString.call(arr); //”[object Object]”//很明显这种方法不能准确判断person是Person类的实例，而只能用instanceof 操作符来进行判断，如下所示：console.log(person instanceof Person);//输出结果为true//3.判断原生JSON对象： var isNativeJSON = window.</description>
    </item>
    
    <item>
      <title>函数作用域预编译</title>
      <link>https://Littlehalo.github.io/ali/js%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Littlehalo.github.io/ali/js%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>函数作用域预编译  创建ao对象 找形参和变量声明 将形参和变量名 当做AO对象的属性名，值为undefined 实参形参统一 在函数体里面找函数声明，赋值  全局作用域的预编译  创建GO对象 找变量声明 将变量名作为GO对象的属性名 值为undefined 找函数声明，赋值  作用域链 保存在[scope]中，用户访问不到但是存在，js引擎可以访问到
闭包的理解（内部函数在外部可以调用） 闭包的引用：js的防抖和节流
防抖function debounce(fun,delay){let timerreturn function(args){clearTimeout(timer)timer = setTimeout(function(){fun(args)},delay)}}节流function throottle(fun,wait){let timeoutreturn function(){if(!timeout){timeout = setTimeout(function(){timeout=nullfun},wait)}}}深拷贝浅拷贝 　JS分两种数据类型：
　基本数据类型（存放在栈中）**：**Number、String、Boolean、Null、 Undefined、Symbol（ES6），**这些类型可以直接操作保存在变量中的实际值。
　引用数据类型（存放在堆内存中的对象）：Object（在JS中除了基本数据类型以外的都是对象，数据是对象，函数是对象，正则表达式是对象）
​	赋值：
​	浅拷贝：
​	深拷贝：
绑定this指向  call apply bind  </description>
    </item>
    
    <item>
      <title>vue中axios的封装</title>
      <link>https://Littlehalo.github.io/ali/vue%E4%B8%ADaxios%E5%B0%81%E8%A3%85/</link>
      <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Littlehalo.github.io/ali/vue%E4%B8%ADaxios%E5%B0%81%E8%A3%85/</guid>
      <description>关于axios在vue中的封装以及遇到的一些问题 在src目录下建立文件夹utils/http.js和api/api.js http.js配置 &#39;use strict&#39;import axios from &#39;axios&#39;import qs from &#39;qs&#39;axios.interceptors.request.use(config =&amp;gt; {// loadingreturn config}, error =&amp;gt; {return Promise.reject(error)})axios.interceptors.response.use(response =&amp;gt; {return response}, error =&amp;gt; {return Promise.resolve(error.response)})function checkStatus (response) {// loading// 如果http状态码正常，则直接返回数据if (response &amp;amp;&amp;amp; (response.status === 200 || response.status === 304 || response.status === 400)) {return response// 如果不需要除了data之外的数据，可以直接 return response.data}// 异常状态下，把错误信息返回去return {status: -404,msg: &#39;网络异常&#39;}}function checkCode (res) {// 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户if (res.</description>
    </item>
    
    <item>
      <title>再一次搭建博客</title>
      <link>https://Littlehalo.github.io/ali/%E5%86%8D%E6%AC%A1%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Littlehalo.github.io/ali/%E5%86%8D%E6%AC%A1%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>再一次搭建博客，这次使用的是gitte，只是简单的以为国内代码托管平台可能会更快点，没想到却遇见了很多棘手的问题，hexo download下来但是不能hexo d到gitte仓库上去，后面更加是牵扯到了ssh公钥的问题上去，后面导致连本地代码都不能push上去，后来想到一个蠢方法，就是简单的把hexo代码push上去就可以了，在一键部署上去，能简单使用了就可以了，后面的自己研究，就当是一个自己的笔记把
本地代码 推送到gitte步骤：
 git init git add . git commit -m &amp;quot; &amp;quot; git remote add origin url git push -u origin master  删除自己的有关联的分支
find . -name &amp;ldquo;.git&amp;rdquo; | xargs rm -Rf
 调试了一天，配置了太多太多都没有用，后面改用hugo搭建了博客  在config.toml中改参数 生成public: 打开文件根目录的cmd或git bash here输入hugo 进入public 在该页面下打开git bash here 相继输入以下代码  git init git add -Agit commit -am&amp;quot;init&amp;quot;git remote add origin https://github.com/你的用户名/你的用户名.github.io.git（假如是我：git remote add origin https://github.com/spiritLHL/spiritLHL.github.io.git）git push -f origin master（无响应则再次运行同一代码，最多两次）ok!</description>
    </item>
    
  </channel>
</rss>