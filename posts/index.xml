<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on LiuHuang&#39;s Blog</title>
		<link>https://Littlehalo.github.io/posts/</link>
		<description>Recent content in Posts on LiuHuang&#39;s Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-CN</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Mon, 22 Feb 2021 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://Littlehalo.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>js的一些坑坑洼洼</title>
			<link>https://Littlehalo.github.io/posts/js%E4%B8%80%E4%BA%9B%E5%9D%91%E5%9D%91%E6%B4%BC%E6%B4%BC/</link>
			<pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
			
			<guid>https://Littlehalo.github.io/posts/js%E4%B8%80%E4%BA%9B%E5%9D%91%E5%9D%91%E6%B4%BC%E6%B4%BC/</guid>
			<description>对象是最复杂的数据类型，又可以分成三个子类型。  狭义的对象（object） 数组（array） 函数（function）  javaScript 有三种方法，可以确定一个值到底是什么类型。  typeof运算符 instanceof运算符 Object.prototype.toString方法  underfine和null的区别 区别是这样的：null是一个表示“空”的对象，转为数值时为0；undefined是一个表示&amp;quot;此处无定义&amp;quot;的原始值，转为数值时为NaN。
布尔值 如果 JavaScript 预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了下面六个值被转为false，其他值都视为true。
 undefined null false 0 NaN &amp;quot;&amp;quot;或&#39;&#39;（空字符串）  注意，空数组（[]）和空对象（{}）对应的布尔值，都是true。
parseInt()  parseInt方法用于将字符串转为整数 如果字符串头部有空格，空格会被自动去除  行首{foo：123} JavaScript 引擎读到上面这行代码，会发现可能有两种含义。第一种可能是，这是一个表达式，表示一个包含foo属性的对象；第二种可能是，这是一个语句，表示一个代码区块，里面有一个标签foo，指向表达式123。为了避免这种歧义，JavaScript 引擎的做法是，如果遇到这种情况，无法确定是对象还是代码块，一律解释为代码块。
如果要解释为对象，最好在大括号前加上圆括号。因为圆括号的里面，只能是表达式，所以确保大括号只能解释为对象。
var foo = &#39;bar&#39;;var obj = {foo: 1,bar: 2};obj.foo // 1obj[foo]上面代码中，引用对象obj的foo属性时，如果使用点运算符，foo就是字符串；如果使用方括号运算符，但是不使用引号，那么foo就是一个变量，指向字符串bar。
arguments 由于 JavaScript 允许函数有不定数目的参数，所以需要一种机制，可以在函数体内部读取所有参数。这就是arguments对象的由来。
闭包 function f1() {var n = 999;function f2() {console.</description>
			<content type="html"><![CDATA[<h4 id="对象是最复杂的数据类型又可以分成三个子类型">对象是最复杂的数据类型，又可以分成三个子类型。</h4>
<ul>
<li>狭义的对象（object）</li>
<li>数组（array）</li>
<li>函数（function）</li>
</ul>
<h4 id="javascript-有三种方法可以确定一个值到底是什么类型">javaScript 有三种方法，可以确定一个值到底是什么类型。</h4>
<ul>
<li><code>typeof</code>运算符</li>
<li><code>instanceof</code>运算符</li>
<li><code>Object.prototype.toString</code>方法</li>
</ul>
<h4 id="underfine和null的区别">underfine和null的区别</h4>
<p>区别是这样的：<code>null</code>是一个表示“空”的对象，转为数值时为<code>0</code>；<code>undefined</code>是一个表示&quot;此处无定义&quot;的原始值，转为数值时为<code>NaN</code>。</p>
<h4 id="布尔值">布尔值</h4>
<p>如果 JavaScript 预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了下面六个值被转为<code>false</code>，其他值都视为<code>true</code>。</p>
<ul>
<li><code>undefined</code></li>
<li><code>null</code></li>
<li><code>false</code></li>
<li><code>0</code></li>
<li><code>NaN</code></li>
<li><code>&quot;&quot;</code>或<code>''</code>（空字符串）</li>
</ul>
<p>注意，空数组（<code>[]</code>）和空对象（<code>{}</code>）对应的布尔值，都是<code>true</code>。</p>
<h3 id="parseint">parseInt()</h3>
<ul>
<li><code>parseInt</code>方法用于将字符串转为整数</li>
<li>如果字符串头部有空格，空格会被自动去除</li>
</ul>
<h4 id="行首foo123">行首{foo：123}</h4>
<p>JavaScript 引擎读到上面这行代码，会发现可能有两种含义。第一种可能是，这是一个表达式，表示一个包含<code>foo</code>属性的对象；第二种可能是，这是一个语句，表示一个代码区块，里面有一个标签<code>foo</code>，指向表达式<code>123</code>。<strong>为了避免这种歧义，JavaScript 引擎的做法是，如果遇到这种情况，无法确定是对象还是代码块，一律解释为代码块。</strong></p>
<p><strong>如果要解释为对象，最好在大括号前加上圆括号。因为圆括号的里面，只能是表达式，所以确保大括号只能解释为对象。</strong></p>
<pre><code>var foo = 'bar';

var obj = {
  foo: 1,
  bar: 2
};

obj.foo  // 1
obj[foo]
</code></pre><p>上面代码中，引用对象<code>obj</code>的<code>foo</code>属性时，如果使用点运算符，<code>foo</code>就是字符串；如果使用方括号运算符，但是不使用引号，那么<code>foo</code>就是一个变量，指向字符串<code>bar</code>。</p>
<h4 id="arguments"><strong>arguments</strong></h4>
<p>由于 JavaScript 允许函数有不定数目的参数，所以需要一种机制，可以在函数体内部读取所有参数。这就是<code>arguments</code>对象的由来。</p>
<h4 id="闭包">闭包</h4>
<pre><code>function f1() {
  var n = 999;
  function f2() {
    console.log(n);
  }
  return f2;
}

var result = f1();
result(); // 999
</code></pre><p>上面代码中，函数<code>f1</code>的返回值就是函数<code>f2</code>，由于<code>f2</code>可以读取<code>f1</code>的内部变量，所以就可以在外部获得<code>f1</code>的内部变量了。</p>
<p>闭包就是函数<code>f2</code>，即能够读取其他函数内部变量的函数。由于在 JavaScript 语言中，只有函数内部的子函数才能读取内部变量，<strong>因此可以把闭包简单理解成“定义在一个函数内部的函数”。<strong>闭包最大的特点，就是</strong>它可以“记住”诞生的环境</strong>，比如<code>f2</code>记住了它诞生的环境<code>f1</code>，所以从<code>f2</code>可以得到<code>f1</code>的内部变量。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>
<p><strong>闭包的最大用处有两个</strong></p>
<ol>
<li>一个是可以读取外层函数内部的变量，</li>
<li>另一个就是让这些变量始终保持在内存中，即闭包可以使得它诞生环境一直存在。请看下面的例子，闭包使得内部变量记住上一次调用时的运算结果。</li>
</ol>
<h4 id="eval">eval</h4>
<p><code>eval</code>命令接受一个字符串作为参数，并将这个字符串当作语句执行。</p>
<h4 id="数组">数组</h4>
<p>任何类型的数据，都可以放入数组</p>
<pre><code>var arr = [
  {a: 1},
  [1, 2, 3],
  function() {return true;}
];

arr[0] // Object {a: 1}
arr[1] // [1, 2, 3]
arr[2] // function (){return true;}


</code></pre><ol>
<li>本质上，数组属于一种特殊的对象。<code>typeof</code>运算符会返回数组的类型是<code>object</code>。</li>
<li>数组的特殊性体现在，它的键名是<strong>按次序排列的一组整数</strong></li>
<li>javaScript 语言规定，对象的键名一律为字符串，所以，数组的键名其实也是字符串。之所以可以用数值读取，是因为非字符串的键名会被转为字符串。</li>
<li>对象有两种读取成员的方法：点结构（<code>object.key</code>）和方括号结构（<code>object[key]</code>）。但是，对于数值的键名，不能使用点结构。</li>
</ol>
<h4 id="forin-循环和数组的遍历">for&hellip;in 循环和数组的遍历</h4>
<p><code>for...in</code>循环不仅可以遍历对象，也可以遍历数组，毕竟数组只是一种特殊对象。</p>
<pre><code>var a = [1, 2, 3];

for (var i in a) {
  console.log(a[i]);
}
// 1
// 2
// 3
</code></pre><h4 id="数组-1">数组</h4>
<p>数组中<code>length</code>是可写的，动态的清空数组的一个有效方法，就是将<code>length</code>属性设为0。</p>
<p>使用<code>delete</code>命令删除一个数组成员，会形成空位，并且不会影响<code>length</code>属性。</p>
<h4 id="类似数组的对象">类似数组的对象</h4>
<ul>
<li>
<p>如果一个对象的所有键名都是正整数或零，并且有<code>length</code>属性，那么这个对象就很像数组，语法上称为“类似数组的对象”（array-like object）</p>
</li>
<li>
<p>“类似数组的对象”的根本特征，就是具有<code>length</code>属性。只要有<code>length</code>属性，就可以认为这个对象类似于数组。但是有一个问题，这种<code>length</code>属性不是动态值，不会随着成员的变化而变化。</p>
</li>
<li>
<p>数组的<code>slice</code>方法可以将“类似数组的对象”变成真正的数组。</p>
</li>
</ul>
<pre><code>var arr = Array.prototype.slice.call(arrayLike);
</code></pre><h4 id="callapplybind">call,apply,bind</h4>
<p><img src="https://www.runoob.com/wp-content/uploads/2018/08/1535346409-7922-20170316173631526-1279562612.png" alt=""></p>
<pre><code>obj.myFun.call(db,'成都','上海')；　　　　 // 德玛 年龄 99  来自 成都去往上海
obj.myFun.apply(db,['成都','上海']);      // 德玛 年龄 99  来自 成都去往上海  
obj.myFun.bind(db,'成都','上海')();       // 德玛 年龄 99  来自 成都去往上海
obj.myFun.bind(db,['成都','上海'])();　　 // 德玛 年龄 99  来自 成都, 上海去往 undefined
</code></pre><p>从上面四个结果不难看出:</p>
<p>call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了：</p>
<p>call 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 <strong>obj.myFun.call(db,&lsquo;成都&rsquo;, &hellip; ,&lsquo;string&rsquo; )</strong>。</p>
<p>apply 的所有参数都必须放在一个数组里面传进去 <strong>obj.myFun.apply(db,[&lsquo;成都&rsquo;, &hellip;, &lsquo;string&rsquo; ])</strong>。</p>
<p>bind 除了返回是函数以外，它 的参数和 call 一样。</p>
<p>当然，三者的参数不限定是 string 类型，允许是各种类型，包括函数 、 object 等等！</p>
]]></content>
		</item>
		
		<item>
			<title>vue的双向绑定原理</title>
			<link>https://Littlehalo.github.io/posts/vue%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/</link>
			<pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
			
			<guid>https://Littlehalo.github.io/posts/vue%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/</guid>
			<description>Object,defineproperty &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;inputOne&amp;quot;&amp;gt;&amp;lt;h1 id=&amp;quot;h1One&amp;quot;&amp;gt;&amp;lt;/h1&amp;gt;//获取input，h1节点inputOne，h1One//声明对象objvar obj = {value:&#39;&#39;}Object.defineProperty(obj,&#39;value&#39;,{set(val){h1One.innerText = val}})inputOne.onkeyup = function(e){obj.value = e.target.value4 }发布订阅模式 发布&amp;mdash;订阅模式它定义了对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。
发布订阅模式的优点：
 支持简单的广播通信，当对象状态发生改变时，会自动通知已经订阅过的对象。 发布者与订阅者耦合性降低，发布者只管发布一条消息出去，它不关心这条消息如何被订阅者使用，同时，订阅者只监听发布者的事件名，只要发布者的事件名不变，它不管发布者如何改变；  对于第一点，我们日常工作中也经常使用到，比如我们的ajax请求，请求有成功(success)和失败(error)的回调函数，我们可以订阅ajax的success和error事件。我们并不关心对象在异步运行的状态，我们只关心success的时候或者error的时候我们要做点我们自己的事情就可以了~
发布订阅模式的缺点：
 创建订阅者需要消耗一定的时间和内存。 虽然可以弱化对象之间的联系，如果过度使用的话，反而使代码不好理解及代码不好维护等等。  </description>
			<content type="html"><![CDATA[<h4 id="objectdefineproperty">Object,defineproperty</h4>
<pre><code>&lt;input type=&quot;text&quot; id=&quot;inputOne&quot;&gt;
&lt;h1 id=&quot;h1One&quot;&gt;&lt;/h1&gt;


//获取input，h1节点inputOne，h1One

//声明对象obj
var obj = {
	value:''
}

Object.defineProperty(obj,'value',{
	set(val){
		h1One.innerText = val
	}
})

inputOne.onkeyup = function(e){
	obj.value = e.target.value4  
}
</code></pre><h4 id="发布订阅模式">发布订阅模式</h4>
<p><strong>发布&mdash;订阅模式它定义了对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。</strong></p>
<p><strong>发布订阅模式的优点：</strong></p>
<ol>
<li>支持简单的广播通信，当对象状态发生改变时，会自动通知已经订阅过的对象。</li>
<li>发布者与订阅者耦合性降低，发布者只管发布一条消息出去，它不关心这条消息如何被订阅者使用，同时，订阅者只监听发布者的事件名，只要发布者的事件名不变，它不管发布者如何改变；</li>
</ol>
<p><strong>对于第一点，我们日常工作中也经常使用到，比如我们的ajax请求，请求有成功(success)和失败(error)的回调函数，我们可以订阅ajax的success和error事件。我们并不关心对象在异步运行的状态，我们只关心success的时候或者error的时候我们要做点我们自己的事情就可以了~</strong></p>
<p><strong>发布订阅模式的缺点：</strong></p>
<ol>
<li>创建订阅者需要消耗一定的时间和内存。</li>
<li>虽然可以弱化对象之间的联系，如果过度使用的话，反而使代码不好理解及代码不好维护等等。</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>constructor</title>
			<link>https://Littlehalo.github.io/posts/js%E4%B8%AD%E7%9A%84constructor/</link>
			<pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
			
			<guid>https://Littlehalo.github.io/posts/js%E4%B8%AD%E7%9A%84constructor/</guid>
			<description> __proto__和constructor属性是对象所独有的； prototype属性是函数所独有的，因为函数也是一种对象，所以函数也拥有__proto__和constructor属性。 __proto__属性的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的__proto__属性所指向的那个对象（父对象）里找，一直找，直到__proto__属性的终点null，然后返回undefined，再往上找就相当于在null上取值，会报错。通过__proto__属性将对象连接起来的这条链路即我们所谓的原型链。 prototype属性的作用就是让该函数所实例化的对象们都可以找到公用的属性和方法，即f1.proto === Foo.prototype。 constructor属性的含义就是指向该对象的构造函数，所有函数（此时看成对象了）最终的构造函数都指向Function。 另外 proto 属性是浏览器对es5的实现，而不是es标准。  </description>
			<content type="html"><![CDATA[<ol>
<li>__proto__和<strong>constructor</strong>属性是对象所独有的；</li>
<li><strong>prototype</strong>属性是函数所独有的，因为函数也是一种对象，所以函数也拥有__proto__和<strong>constructor</strong>属性。 __proto__属性的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的__proto__属性所指向的那个对象（父对象）里找，一直找，直到__proto__属性的终点null，然后返回<strong>undefined</strong>，再往上找就相当于在<strong>null</strong>上取值，会报错。通过__proto__属性将对象连接起来的这条链路即我们所谓的原型链。</li>
<li><strong>prototype</strong>属性的作用就是让该函数所实例化的对象们都可以找到公用的属性和方法，即f1.<strong>proto</strong> === <strong>Foo</strong>.<strong>prototype</strong>。</li>
<li><strong>constructor</strong>属性的含义就是指向该对象的构造函数，所有函数（此时看成对象了）最终的构造函数都指向<strong>Function</strong>。 另外 <strong>proto</strong> 属性是浏览器对es5的实现，而不是es标准。</li>
</ol>
<p><img src="https://pic.xiaohuochai.site/blog/JS_ECMA_grammer_proto.png" alt=""></p>
<p><img src="https://i.loli.net/2021/02/09/BQ6zpe1Z3NGHa48.png" alt="1.png"></p>
]]></content>
		</item>
		
		<item>
			<title>Object.prototype.toString.call()</title>
			<link>https://Littlehalo.github.io/posts/object.prototype.tostring.call/</link>
			<pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
			
			<guid>https://Littlehalo.github.io/posts/object.prototype.tostring.call/</guid>
			<description>使用Object.prototype上的原生toString()方法判断数据类型，使用方法如下： Object.prototype.toString.call(value)
//1.判断基本类型：Object.prototype.toString.call(null);//”[object Null]”Object.prototype.toString.call(undefined);//”[object Undefined]”Object.prototype.toString.call(“abc”);//”[object String]”Object.prototype.toString.call(123);//”[object Number]”Object.prototype.toString.call(true);//”[object Boolean]”//2.判断原生引用类型：//函数类型Function fn(){console.log(“test”);}Object.prototype.toString.call(fn);//”[object Function]”//日期类型var date = new Date();Object.prototype.toString.call(date);//”[object Date]”// 数组类型var arr = [1,2,3];Object.prototype.toString.call(arr);//”[object Array]”//正则表达式var reg = /[hbc]at/gi;Object.prototype.toString.call(arr);//”[object Array]”//自定义类型function Person(name, age) {this.name = name;this.age = age;}var person = new Person(&amp;quot;Rose&amp;quot;, 18);Object.prototype.toString.call(arr); //”[object Object]”//很明显这种方法不能准确判断person是Person类的实例，而只能用instanceof 操作符来进行判断，如下所示：console.log(person instanceof Person);//输出结果为true//3.判断原生JSON对象： var isNativeJSON = window.</description>
			<content type="html"><![CDATA[<p>使用Object.prototype上的原生toString()方法判断数据类型，使用方法如下： Object.prototype.toString.call(value)</p>
<pre><code>//1.判断基本类型：
 Object.prototype.toString.call(null);//”[object Null]”
 Object.prototype.toString.call(undefined);//”[object Undefined]”
 Object.prototype.toString.call(“abc”);//”[object String]”
 Object.prototype.toString.call(123);//”[object Number]”
 Object.prototype.toString.call(true);//”[object Boolean]”
 
//2.判断原生引用类型：
 //函数类型
  Function fn(){console.log(“test”);}
  Object.prototype.toString.call(fn);//”[object Function]”
 //日期类型
  var date = new Date();
  Object.prototype.toString.call(date);//”[object Date]”
// 数组类型
  var arr = [1,2,3];
  Object.prototype.toString.call(arr);//”[object Array]”
 //正则表达式
  var reg = /[hbc]at/gi;
  Object.prototype.toString.call(arr);//”[object Array]”
 //自定义类型
  function Person(name, age) {
      this.name = name;
      this.age = age;
  }
  var person = new Person(&quot;Rose&quot;, 18);
  Object.prototype.toString.call(arr); //”[object Object]”
 //很明显这种方法不能准确判断person是Person类的实例，而只能用instanceof 操作符来进行判断，如下所示：
 console.log(person instanceof Person);//输出结果为true
 
//3.判断原生JSON对象：                                                                                            
var isNativeJSON = window.JSON &amp;&amp; Object.prototype.toString.call(JSON);
console.log(isNativeJSON);//输出结果为”[object JSON]”说明JSON是原生的，否则不是；
//注意：Object.prototype.toString()本身是允许被修改的，而我们目前所讨论的关于Object.prototype.toString()这个方法的应用都是假设toString()方法未被修改为前提的。
</code></pre>]]></content>
		</item>
		
		<item>
			<title>函数作用域预编译</title>
			<link>https://Littlehalo.github.io/posts/js%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
			<pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
			
			<guid>https://Littlehalo.github.io/posts/js%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
			<description>函数作用域预编译  创建ao对象 找形参和变量声明 将形参和变量名 当做AO对象的属性名，值为undefined 实参形参统一 在函数体里面找函数声明，赋值  全局作用域的预编译  创建GO对象 找变量声明 将变量名作为GO对象的属性名 值为undefined 找函数声明，赋值  作用域链 保存在[scope]中，用户访问不到但是存在，js引擎可以访问到
闭包的理解（内部函数在外部可以调用） 闭包的引用：js的防抖和节流
防抖function debounce(fun,delay){let timerreturn function(args){clearTimeout(timer)timer = setTimeout(function(){fun(args)},delay)}}节流function throottle(fun,wait){let timeoutreturn function(){if(!timeout){timeout = setTimeout(function(){timeout=nullfun},wait)}}}深拷贝浅拷贝 　JS分两种数据类型：
　基本数据类型（存放在栈中）**：**Number、String、Boolean、Null、 Undefined、Symbol（ES6），**这些类型可以直接操作保存在变量中的实际值。
　引用数据类型（存放在堆内存中的对象）：Object（在JS中除了基本数据类型以外的都是对象，数据是对象，函数是对象，正则表达式是对象）
​	赋值：
​	浅拷贝：
​	深拷贝：
绑定this指向  call apply bind  </description>
			<content type="html"><![CDATA[<h5 id="函数作用域预编译">函数作用域预编译</h5>
<ol>
<li>创建ao对象</li>
<li>找形参和变量声明 将形参和变量名 当做AO对象的属性名，值为undefined</li>
<li>实参形参统一</li>
<li>在函数体里面找函数声明，赋值</li>
</ol>
<h5 id="全局作用域的预编译">全局作用域的预编译</h5>
<ol>
<li>创建GO对象</li>
<li>找变量声明 将变量名作为GO对象的属性名 值为undefined</li>
<li>找函数声明，赋值</li>
</ol>
<h5 id="作用域链">作用域链</h5>
<p>保存在[scope]中，用户访问不到但是存在，js引擎可以访问到</p>
<h5 id="闭包的理解内部函数在外部可以调用">闭包的理解（内部函数在外部可以调用）</h5>
<p><strong>闭包的引用：js的防抖和节流</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">防抖</span>
<span class="kd">function</span> <span class="nx">debounce</span><span class="p">(</span><span class="nx">fun</span><span class="p">,</span><span class="nx">delay</span><span class="p">){</span>
	<span class="kd">let</span> <span class="nx">timer</span>
	<span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">args</span><span class="p">){</span>
		<span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timer</span><span class="p">)</span>
		<span class="nx">timer</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
			<span class="nx">fun</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span>
		<span class="p">},</span><span class="nx">delay</span><span class="p">)</span>
<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><pre><code>节流
function throottle(fun,wait){
	let timeout
	return function(){
		if(!timeout){
			timeout = setTimeout(function(){
				timeout=null
				fun
			},wait)
		}
	}
}
</code></pre><h5 id="深拷贝浅拷贝">深拷贝浅拷贝</h5>
<p>　　JS分两种数据类型：</p>
<p>　　　　<strong>基本数据类型</strong>（存放在栈中）**：**Number、String、Boolean、Null、 Undefined、Symbol（ES6），**这些类型可以直接操作保存在变量中的实际值。</p>
<p>　　　　<strong>引用数据类型</strong>（存放在堆内存中的对象）：<strong>Object（在JS中除了基本数据类型以外的都是对象，数据是对象，函数是对象，正则表达式是对象）</strong></p>
<p>​				赋值：</p>
<p>​				浅拷贝：</p>
<p>​				深拷贝：</p>
<h5 id="绑定this指向">绑定this指向</h5>
<ul>
<li>call</li>
<li>apply</li>
<li>bind</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>vue中axios的封装</title>
			<link>https://Littlehalo.github.io/posts/vue%E4%B8%ADaxios%E5%B0%81%E8%A3%85/</link>
			<pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
			
			<guid>https://Littlehalo.github.io/posts/vue%E4%B8%ADaxios%E5%B0%81%E8%A3%85/</guid>
			<description>关于axios在vue中的封装以及遇到的一些问题 在src目录下建立文件夹utils/http.js和api/api.js http.js配置 &#39;use strict&#39;import axios from &#39;axios&#39;import qs from &#39;qs&#39;axios.interceptors.request.use(config =&amp;gt; {// loadingreturn config}, error =&amp;gt; {return Promise.reject(error)})axios.interceptors.response.use(response =&amp;gt; {return response}, error =&amp;gt; {return Promise.resolve(error.response)})function checkStatus (response) {// loading// 如果http状态码正常，则直接返回数据if (response &amp;amp;&amp;amp; (response.status === 200 || response.status === 304 || response.status === 400)) {return response// 如果不需要除了data之外的数据，可以直接 return response.data}// 异常状态下，把错误信息返回去return {status: -404,msg: &#39;网络异常&#39;}}function checkCode (res) {// 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户if (res.</description>
			<content type="html"><![CDATA[<h1 id="关于axios在vue中的封装以及遇到的一些问题">关于axios在vue中的封装以及遇到的一些问题</h1>
<h4 id="在src目录下建立文件夹utilshttpjs和apiapijs">在src目录下建立文件夹utils/http.js和api/api.js</h4>
<h4 id="httpjs配置">http.js配置</h4>
<pre><code>'use strict'

import axios from 'axios'
import qs from 'qs'

axios.interceptors.request.use(config =&gt; {
  // loading
  return config
}, error =&gt; {
  return Promise.reject(error)
})

axios.interceptors.response.use(response =&gt; {
  return response
}, error =&gt; {
  return Promise.resolve(error.response)
})

function checkStatus (response) {
  // loading
  // 如果http状态码正常，则直接返回数据
  if (response &amp;&amp; (response.status === 200 || response.status === 304 || response.status === 400)) {
    return response
    // 如果不需要除了data之外的数据，可以直接 return response.data
  }
  // 异常状态下，把错误信息返回去
  return {
    status: -404,
    msg: '网络异常'
  }
}

function checkCode (res) {
  // 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户
  if (res.status === -404) {
    console.log(res.msg)
  }
  if (res.data &amp;&amp; (!res.data.success)) {
    console.log(&quot;这是一个拦截器&quot;)
  }
  return res
}

export default {
  post (url, data) {
    return axios({
      method: 'post',
      baseURL: 'https://v0.yiketianqi.com/',
      url,
      data: qs.stringify(data),
      timeout: 10000,
      headers: {
        'X-Requested-With': 'XMLHttpRequest',
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
      }
    }).then(
      (response) =&gt; {
        return checkStatus(response)
      }
    ).then(
      (res) =&gt; {
        return checkCode(res)
      }
    )
  },
  get (url, params) {
    return axios({
      method: 'get',
      baseURL: '/tq',
      url,
      params, // get 请求时带的参数
      timeout: 10000,
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    }).then(
      (response) =&gt; {
        return checkStatus(response)
      }
    ).then(
      (res) =&gt; {
        return checkCode(res)
      }
    )
  }
}

</code></pre><h4 id="apijs中存放一些接口api">api.js中存放一些接口api</h4>
<pre><code>export default {
    right: '/api?version=v61&amp;appid=42775833&amp;appsecret=DP2I4kS2', // 正确路径
  }
  
</code></pre><h4 id="在vue中引用">在vue中引用</h4>
<pre><code>import http from './utils/http'
import api from './api/api'

created() {
    // axios.defaults.baseURL=&quot;https://v0.yiketianqi.com/&quot;
    // axios.get('api?version=v61&amp;appid=42775833&amp;appsecret=DP2I4kS2').then((res)=&gt;{
    //   this.title = res.data.air_tips
    //   console.log(res)
    // })
    this.fetchData()
  },
  methods: {
    fetchData:async function () {
      let params = {
      }
      const res = await http.get(api.right)
      // if (res.data.success) {
      //   alert('请求成功')
      // }
      console.log(res);
    },
  }
</code></pre><h3 id="产生的问题">产生的问题</h3>
<p>跨域问题</p>
<p>配置vue.config.js</p>
<pre><code>const path =  require('path');
const resolve = (dir) =&gt; path.join(__dirname, dir);

const CompressionWebpackPlugin = require(&quot;compression-webpack-plugin&quot;); // 开启gzip压缩(可选)
const productionGzipExtensions = /\.(js|css|json|txt|html|ico|svg)(\?.*)?$/i; // 开启gzip压缩(可选)

const BundleAnalyzerPlugin = require(&quot;webpack-bundle-analyzer&quot;).BundleAnalyzerPlugin; // 打包分析，(可选)

const IS_PRODUCTION = ['production', 'prod'].includes(process.env.NODE_ENV);//判断是否是生产环境
/** 正式配置项，以下参数 都是可选**/
module.exports = {
    publicPath: process.env.NODE_ENV === 'production' ? '/site/vue-demo/' : '/',  // 打包公共路径
    indexPath: 'index.html' , // 相对于打包路径index.html的路径
    outputDir: process.env.outputDir || 'dist', // 'dist', 生产环境构建文件的目录
    assetsDir: 'static', // 相对于outputDir的静态资源(js、css、img、fonts)目录
    lintOnSave: false, // 是否在开发环境下通过 eslint-loader 在每次保存时 lint 代码，false不需要
    runtimeCompiler: true, // 是否使用包含运行时编译器的 Vue 构建版本
    productionSourceMap: !IS_PRODUCTION, // 生产环境的 source map,
    parallel: require(&quot;os&quot;).cpus().length &gt; 1, // 是否为 Babel 或 TypeScript 使用 thread-loader。该选项在系统的 CPU 有多于一个内核时自动启用，仅作用于生产构建。
    pwa: {}, // 向 PWA 插件传递选项。
    chainWebpack: config =&gt; {
        config.resolve.symlinks(true); // 修复热更新失效
        // 如果使用多页面打包，使用vue inspect --plugins查看html是否在结果数组中
        config.plugin(&quot;html&quot;).tap(args =&gt; {
            // 修复 Lazy loading routes Error
            args[0].chunksSortMode = &quot;none&quot;;
            return args;
        });
        config.resolve.alias // 添加别名
            .set('@', resolve('src'))
            .set('@assets', resolve('src/assets'))
            .set('@components', resolve('src/components'))
            .set('@views', resolve('src/views'))
            .set('@store', resolve('src/store'));
        // 压缩图片
        // 需要 npm i -D image-webpack-loader
        config.module
            .rule(&quot;images&quot;)
            .use(&quot;image-webpack-loader&quot;)
            .loader(&quot;image-webpack-loader&quot;)
            .options({
                mozjpeg: { progressive: true, quality: 65 },
                optipng: { enabled: false },
                pngquant: { quality: [0.65, 0.9], speed: 4 },
                gifsicle: { interlaced: false },
                webp: { quality: 75 }
            });
        // 打包分析, 打包之后自动生成一个名叫report.html文件(可忽视)
        if (IS_PRODUCTION) {
            config.plugin(&quot;webpack-report&quot;).use(BundleAnalyzerPlugin, [
                {
                    analyzerMode: &quot;static&quot;
                }
            ]);
        }
    },
    //webpack的配置项
    configureWebpack: config =&gt; {
        // 开启 gzip 压缩
        // 需要 npm i -D compression-webpack-plugin
        const plugins = [];
        if (IS_PRODUCTION) {
            plugins.push(
                new CompressionWebpackPlugin({
                    filename: &quot;[path].gz[query]&quot;,
                    algorithm: &quot;gzip&quot;,
                    test: productionGzipExtensions,
                    threshold: 10240,
                    minRatio: 0.8
                })
            );
        }
        config.plugins = [...config.plugins, ...plugins];
    },
    css: {
        extract: IS_PRODUCTION,
        requireModuleExtension: false,// 去掉文件名中的 .module
        loaderOptions: {
                // 给 less-loader 传递 Less.js 相关选项
                less: {
                    // `globalVars` 定义全局对象，可加入全局变量
                    globalVars: {
                        primary: '#333'
                    }
                }
        }
    },
    devServer: {
            overlay: { // 让浏览器 overlay 同时显示警告和错误
              warnings: true,
              errors: true
            },
            host: &quot;localhost&quot;,
            port: 8081, // 端口号
            https: false, // https:{type:Boolean}
            open: false, //配置后自动启动浏览器
            hotOnly: true, // 热更新
            // proxy: 'http://localhost:8080'   // 配置跨域处理,只有一个代理
            proxy: { //配置多个跨域
                &quot;/tq&quot;: {
                    target: &quot;https://v0.yiketianqi.com/&quot;,
                    changeOrigin: true,
                    ws: true,//websocket支持
                    secure: false,
                    // pathRewrite: {
                    //     &quot;^/tq&quot;: &quot;https://v0.yiketianqi.com/&quot;
                    // }
                }
            }
        }
}
</code></pre><h3 id="heading"></h3>
<h4 id="问题1一开始配置了devserve但是请求的还是本地接口">问题1：一开始配置了devServe，但是请求的还是本地接口</h4>
<h5 id="后来修改port端口为8081恢复正常不知道什么原因">后来修改port端口为8081，恢复正常，不知道什么原因</h5>
<h4 id="针对学习axios官网axios拦截器vue-cli官网一些配置">针对学习：axios官网（axios拦截器）；vue-cli官网（一些配置）</h4>
]]></content>
		</item>
		
		<item>
			<title>再一次搭建博客</title>
			<link>https://Littlehalo.github.io/posts/%E5%86%8D%E6%AC%A1%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
			<pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
			
			<guid>https://Littlehalo.github.io/posts/%E5%86%8D%E6%AC%A1%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
			<description>再一次搭建博客，这次使用的是gitte，只是简单的以为国内代码托管平台可能会更快点，没想到却遇见了很多棘手的问题，hexo download下来但是不能hexo d到gitte仓库上去，后面更加是牵扯到了ssh公钥的问题上去，后面导致连本地代码都不能push上去，后来想到一个蠢方法，就是简单的把hexo代码push上去就可以了，在一键部署上去，能简单使用了就可以了，后面的自己研究，就当是一个自己的笔记把
本地代码 推送到gitte步骤：
 git init git add . git commit -m &amp;quot; &amp;quot; git remote add origin url git push -u origin master  删除自己的有关联的分支
find . -name &amp;ldquo;.git&amp;rdquo; | xargs rm -Rf
 调试了一天，配置了太多太多都没有用，后面改用hugo搭建了博客  在config.toml中改参数 生成public: 打开文件根目录的cmd或git bash here输入hugo 进入public 在该页面下打开git bash here 相继输入以下代码  git init git add -Agit commit -am&amp;quot;init&amp;quot;git remote add origin https://github.com/你的用户名/你的用户名.github.io.git（假如是我：git remote add origin https://github.com/spiritLHL/spiritLHL.github.io.git）git push -f origin master（无响应则再次运行同一代码，最多两次）ok!</description>
			<content type="html"><![CDATA[<p>再一次搭建博客，这次使用的是gitte，只是简单的以为国内代码托管平台可能会更快点，没想到却遇见了很多棘手的问题，hexo download下来但是不能hexo d到gitte仓库上去，后面更加是牵扯到了ssh公钥的问题上去，后面导致连本地代码都不能push上去，后来想到一个蠢方法，就是简单的把hexo代码push上去就可以了，在一键部署上去，能简单使用了就可以了，后面的自己研究，就当是一个自己的笔记把</p>
<p>本地代码 推送到gitte步骤：</p>
<ul>
<li>git init</li>
<li>git add .</li>
<li>git commit -m &quot; &quot;</li>
<li>git remote  add origin url</li>
<li>git push -u origin master</li>
</ul>
<p>删除自己的有关联的分支</p>
<p>find . -name &ldquo;.git&rdquo; | xargs rm -Rf</p>
<hr>
<h4 id="调试了一天配置了太多太多都没有用后面改用hugo搭建了博客">调试了一天，配置了太多太多都没有用，后面改用hugo搭建了博客</h4>
<ol>
<li>在config.toml中改参数</li>
<li>生成public:</li>
<li>打开文件根目录的cmd或git bash here输入<code>hugo</code></li>
<li>进入public</li>
<li>在该页面下打开git bash here</li>
<li>相继输入以下代码</li>
</ol>
<pre><code>git init 
git add -A
git commit -am&quot;init&quot;
git remote add origin https://github.com/你的用户名/你的用户名.github.io.git
（假如是我：git remote add origin https://github.com/spiritLHL/spiritLHL.github.io.git）
git push -f origin master
（无响应则再次运行同一代码，最多两次）
</code></pre><p>ok!</p>
]]></content>
		</item>
		
	</channel>
</rss>
